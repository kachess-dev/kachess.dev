#!/usr/bin/env ruby
require 'yaml'
require 'rss'
require 'open-uri'
require 'fileutils'
require 'time'
require 'digest'
require 'reverse_markdown'

NEWS_DIR = "_news"
SOURCES_DIR = "_sources"

FileUtils.mkdir_p(NEWS_DIR)

# Helper to read frontmatter from a Markdown file
def read_frontmatter(file_path)
  content = File.read(file_path)
  if content =~ /\A---\s*\n(.*?\n?)^---\s*$\n?/m
    YAML.safe_load($1) || {}
  else
    {}
  end
end

# Helper to compute SHA256 checksum
def checksum(content)
  Digest::SHA256.hexdigest(content)
end

# Iterate through all Markdown files in _sources
Dir.glob("#{SOURCES_DIR}/*.md") do |source_file|
  frontmatter = read_frontmatter(source_file)
  rss_url = frontmatter["news_rss_url"]
  source_title = frontmatter["title"]

  next unless rss_url # Skip if no RSS URL

  begin
    URI.open(rss_url) do |rss|
      feed = RSS::Parser.parse(rss, false)

      feed.items.each do |item|
        # Get original HTML content from RSS item
        original_html = item.respond_to?(:content_encoded) && item.content_encoded ? item.content_encoded : item.description
        original_html = original_html.to_s.strip

        # Compute checksum on the original HTML
        item_checksum = checksum(original_html)

        # Skip if an existing news file already has this checksum
        existing_file = Dir.glob("#{NEWS_DIR}/*.md").find do |f|
          fm = read_frontmatter(f)
          fm["content_checksum"] == item_checksum
        end
        if existing_file
          puts "Skipping #{item.title} (already imported)"
          next
        end

        # Convert HTML to Markdown for content body
        content_md = ReverseMarkdown.convert(original_html)

        # Generate a safe filename
        date_prefix = item.pubDate ? item.pubDate.strftime("%Y-%m-%d") : Time.now.strftime("%Y-%m-%d")
        title_slug = item.title.downcase.gsub(/[^a-z0-9]+/, '-').gsub(/^-|-$/, '')
        filename = "#{NEWS_DIR}/#{date_prefix}-#{title_slug}.md"

        # Build frontmatter
        news_frontmatter = {
          "title" => item.title,
          "date" => item.pubDate ? item.pubDate.iso8601 : Time.now.iso8601,
          "source" => source_title,
          "source_url" => item.link,
          "original_content" => original_html,
          "content_checksum" => item_checksum
        }

        # Write the news file with proper single frontmatter
        File.write(filename, "---\n" + news_frontmatter.to_yaml.sub(/\A---\s*\n/, '') + "---\n\n" + content_md)
        puts "Created #{filename}"
      end
    end
  rescue OpenURI::HTTPError => e
    warn "Failed to fetch RSS feed for source '#{source_title}' (#{rss_url}): #{e.message}"
    next
  rescue RSS::NotWellFormedError => e
    warn "Failed to parse RSS feed for source '#{source_title}' (#{rss_url}): #{e.message}"
    next
  end
end
