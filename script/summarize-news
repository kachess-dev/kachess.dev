#!/usr/bin/env ruby
require 'yaml'
require 'fileutils'
require 'ruby/openai'

# Configure Ruby-OpenAI client
client = OpenAI::Client.new(access_token: ENV.fetch("OPENAI_API_KEY"))

NEWS_DIR = "_news"

Dir.glob("#{NEWS_DIR}/*.md").each do |file_path|
  content = File.read(file_path)

  # Split front matter and body
  if content =~ /\A---\s*\n(.*?)\n---\s*\n/m
    front_matter_raw = $1
    body = $'
    front_matter = YAML.safe_load(front_matter_raw) || {}

    # Skip if already summarized
    next if front_matter['summarized'] == true

    source_url = front_matter['source_url']
    unless source_url
      puts "Skipping #{file_path}: no source_url"
      next
    end

    # Build a single prompt to handle URL + fallback to original content
    prompt = <<~PROMPT
      Summarize this article in 100 words or less in Markdown format from the URL: #{source_url}.
      If you cannot summarize the URL or fetch its content, summarize the article from this text instead:
      #{body}
      Do not provide any other message or explanation.
      Do not provide a link back to the source URL in the summary because the link will be provided in addition to the summary.
    PROMPT

    begin
      # Retry logic: up to 3 attempts in case of rate limits or temporary failures
      attempts = 0
      summary = nil
      while attempts < 3 && summary.nil?
        attempts += 1
        begin
          response = client.chat(
            parameters: {
              model: "gpt-4",
              messages: [
                { role: "system", content: "You are a helpful assistant." },
                { role: "user", content: prompt }
              ],
              temperature: 0.7
            }
          )
          summary = response.dig("choices", 0, "message", "content")&.strip
        rescue Faraday::TooManyRequestsError
          puts "Rate limited, waiting 5 seconds before retry (attempt #{attempts})"
          sleep 5
        end
      end

      # If a valid summary is returned, store it and mark file as summarized
      if summary && !summary.empty?
        front_matter['original_content'] = body.strip
        front_matter['summarized'] = true

        yaml_front_matter = YAML.dump(front_matter).sub(/\A---\s*\n/, '').strip
        updated_content = ["---", yaml_front_matter, "---", "", summary].join("\n")
        File.write(file_path, updated_content)
        puts "Updated #{file_path}"
      else
        puts "Skipped #{file_path}: could not summarize"
      end

    rescue => e
      puts "Error processing #{file_path}: #{e.class} - #{e.message}"
    end

  else
    puts "Skipping #{file_path}: no front matter"
  end
end
